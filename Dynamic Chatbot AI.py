# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11CufttlIeO0MxdxEqDS-WXXw-VT7-BYh
"""

import nltk
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

nltk.download('punkt')

# Predefined knowledge base
knowledge_base = {
    "what is machine learning": "Machine learning is a subset of AI that allows systems to learn and improve from experience.",
    "what is deep learning": "Deep learning is a type of machine learning that uses neural networks with many layers.",
    "what is regression": "Regression is a statistical method used for predicting a continuous value.",
    "what is classification": "Classification is used to predict discrete labels or categories.",
    "what is natural language processing": "NLP is a field of AI focused on the interaction between computers and human languages.",
    "how to handle missing data": "Common techniques include imputation, removal, or using models that support missing values.",
    "what is data normalization": "Normalization is the process of scaling input variables to a standard range like 0 to 1.",
    "what is clustering": "Clustering is an unsupervised learning technique used to group similar data points together.",
    "how to avoid overfitting": "Use cross-validation, simpler models, or regularization techniques.",
}

# Function to preprocess input
def preprocess(text):
    return text.lower()

# Initialize chatbot
def get_response(user_input, questions, answers):
    processed_questions = [preprocess(q) for q in questions]
    processed_input = preprocess(user_input)

    # Use TF-IDF vectorization
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform(processed_questions + [processed_input])

    # Compute cosine similarity
    similarity = cosine_similarity(vectors[-1], vectors[:-1])
    idx = np.argmax(similarity)
    score = similarity[0][idx]

    # Threshold to detect unknown input
    if score < 0.3:
        return "I'm not sure how to answer that. Can you rephrase?"
    return answers[idx]

# Start chatbot interaction
def run_chatbot():
    print("ðŸ¤– AI Chatbot is ready! Type 'exit' to quit.\n")
    questions = list(knowledge_base.keys())
    answers = list(knowledge_base.values())

    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("Bot: Goodbye! ðŸ‘‹")
            break
        response = get_response(user_input, questions, answers)
        print("Bot:", response)

run_chatbot()